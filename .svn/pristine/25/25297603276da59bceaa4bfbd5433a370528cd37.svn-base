import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class ChessBoardGUI extends JFrame implements ActionListener{

	private static final long serialVersionUID = 1L;
	private static final int squarePixelWidth = 75;
	GridLayout boardLayout;
	JPanel squaresPanel;
	Board board;
	
	/**
	 * Initializes and displays GUI for chess game
	 * @param board The board to display and draw from
	 */
	public ChessBoardGUI(Board board) {
		try {
			UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
		} catch (ClassNotFoundException | InstantiationException
				| IllegalAccessException | UnsupportedLookAndFeelException e) {
			e.printStackTrace();
		}
		
		this.board = board;
		boardLayout = new GridLayout(board.width, board.height);
		setBounds(0, 0, board.height * squarePixelWidth, board.width * squarePixelWidth);
		
		squaresPanel = new JPanel();
		squaresPanel.setLayout(boardLayout);
		getContentPane().add(squaresPanel, BorderLayout.CENTER);
		
		for(int i = 0; i < board.width; i++) {
			for(int j = 0; j < board.height; j++) {
				// Create a button
				SquareButton square = new SquareButton(new Square(i, j));
				square.addActionListener(this);
				square.setOpaque(true);
				square.setBorderPainted(false);
				
				// Create checker board
				if((i + j) % 2 == 0) {
					square.setBackground(new Color(199, 155, 93));
				} else {
					square.setBackground(new Color(255, 243, 201));
				}
				
				// Add to panel
				squaresPanel.add(square);
			}
		}
		
		// General UI properties
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setResizable(false);
		this.setVisible(true);
		
		drawPieces();
	}
	
	private void drawPieces() {
		for(Component component : squaresPanel.getComponents()) {
			SquareButton square = (SquareButton)component;
			Piece piece = board.getPieceAtSquare(square.position);
			if(piece != null) {
				square.setText(piece.name);
				if(piece.color == ChessColor.WHITE) {
					square.setForeground(Color.LIGHT_GRAY);
				} else {
					square.setForeground(Color.BLACK);
				}
			} else {
				square.setText("");
			}
		}
	}

	@Override
	public void actionPerformed(ActionEvent actionEvent) {
		// TODO Auto-generated method stub
		SquareButton squareClicked = (SquareButton) actionEvent.getSource();
		System.out.print("Clicked " + squareClicked.position.xPosition + " " + squareClicked.position.yPosition + "\n");
	}

}
